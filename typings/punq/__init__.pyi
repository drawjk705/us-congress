"""
This type stub file was generated by pyright.
"""

import inspect
from typing import Any, Callable, List, NamedTuple, get_type_hints
from collections import defaultdict
from enum import Enum
from pkg_resources import DistributionNotFound, get_distribution
from ._compat import ensure_forward_ref, is_generic_list

class MissingDependencyException(Exception):
    """
    Raised when a service, or one of its dependencies, is not registered.

    Examples:
        >>> import punq
        >>> container = punq.Container()
        >>> container.resolve("foo")
        Traceback (most recent call last):
        punq.MissingDependencyException: Failed to resolve implementation for foo
    """
    ...


class InvalidRegistrationException(Exception):
    """
    Raised when a registration would result in an unresolvable service.
    """
    ...


class InvalidForwardReferenceException(Exception):
    """
    Raised when a registered service has a forward reference that can't be
    resolved.

    Examples:
        In this example, we register a service with a string as a type annotation.
        When we try to inspect the constructor for the service we fail with an
        InvalidForwardReferenceException

        >>> from attr import dataclass
        >>> from punq import Container
        >>> @dataclass
        ... class Client:
        ...     dep: 'Dependency'
        >>> container = Container()
        >>> container.register(Client)
        Traceback (most recent call last):
        ...
        punq.InvalidForwardReferenceException: name 'Dependency' is not defined


        This error can be resolved by first registering a type with the name
        'Dependency' in the container.

        >>> class Dependency:
        ...     pass
        ...
        >>> container.register(Dependency)
        <punq.Container object at 0x...>
        >>> container.register(Client)
        <punq.Container object at 0x...>
        >>> container.resolve(Client)
        Client(dep=<punq.Dependency object at 0x...>)


        Alternatively, we can register a type using the literal key 'Dependency'.

        >>> class AlternativeDependency:
        ...     pass
        ...
        >>> container = Container()
        >>> container.register('Dependency', AlternativeDependency)
        <punq.Container object at 0x...>
        >>> container.register(Client)
        <punq.Container object at 0x...>
        >>> container.resolve(Client)
        Client(dep=<punq.AlternativeDependency object at 0x...>)

    """
    ...


class Scope(Enum):
    transient = ...
    singleton = ...


class Registration(NamedTuple):
    service: str
    scope: Scope
    builder: Callable[[], Any]
    needs: Any
    args: List[Any]
    ...


class Empty:
    ...


empty = Empty()
class Registry:
    def __init__(self) -> None:
        ...
    
    def register_service_and_impl(self, service, scope, impl, resolve_args):
        """Registers a concrete implementation of an abstract service.

           Examples:
                In this example, the EmailSender type is an abstract class
                and SmtpEmailSender is our concrete implementation.

                >>> from punq import Container
                >>> container = Container()

                >>> class EmailSender:
                ...     def send(self, msg):
                ...         pass
                ...
                >>> class SmtpEmailSender(EmailSender):
                ...     def send(self, msg):
                ...         print("Sending message via smtp: " + msg)
                ...
                >>> container.register(EmailSender, SmtpEmailSender)
                <punq.Container object at 0x...>
                >>> instance = container.resolve(EmailSender)
                >>> instance.send("Hello")
                Sending message via smtp: Hello
        """
        ...
    
    def register_service_and_instance(self, service, instance):
        """Register a singleton instance to implement a service.

        Examples:
            If we have an object that is expensive to construct, or that
            wraps a resource that must not be shared, we might choose to
            use a singleton instance.

            >>> from punq import Container
            >>> container = Container()

            >>> class DataAccessLayer:
            ...     pass
            ...
            >>> class SqlAlchemyDataAccessLayer(DataAccessLayer):
            ...     def __init__(self, engine: SQLAlchemy.Engine):
            ...         pass
            ...
            >>> container.register(
            ...     DataAccessLayer,
            ...     instance=SqlAlchemyDataAccessLayer(create_engine("sqlite:///"))
            ... )
            <punq.Container object at 0x...>
        """
        ...
    
    def register_concrete_service(self, service, scope):
        """Register a service as its own implementation.

            Examples:
                If we need to register a dependency, but we don't need to
                abstract it, we can register it as concrete.

                >>> from punq import Container
                >>> container = Container()
                >>> class FileReader:
                ...     def read(self):
                ...         # Assorted legerdemain and rigmarole
                ...         pass
                ...
                >>> container.register(FileReader)
                <punq.Container object at 0x...>
        """
        ...
    
    def build_context(self, key, existing=...):
        ...
    
    def register(self, service, factory=..., instance=..., scope=..., **kwargs):
        ...
    
    def __getitem__(self, service):
        ...
    


class ResolutionTarget:
    def __init__(self, key, impls) -> None:
        ...
    
    def is_generic_list(self):
        ...
    
    @property
    def generic_parameter(self):
        ...
    
    def next_impl(self):
        ...
    


class ResolutionContext:
    def __init__(self, key, impls) -> None:
        ...
    
    def target(self, key):
        ...
    
    def has_cached(self, key):
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, instance):
        ...
    
    def all_registrations(self, service):
        ...
    


class Container:
    """
    Provides dependency registration and resolution.

    This is the main entrypoint of the Punq library. In normal scenarios users
    will only need to interact with this class.
    """
    def __init__(self) -> None:
        ...
    
    def register(self, service, factory=..., instance=..., scope=..., **kwargs):
        """
        Register a dependency into the container.

        Each registration in Punq has a "service", which is the key used for
        resolving dependencies, and either an "instance" that implements the
        service or a "factory" that understands how to create an instance on
        demand.

        Examples:
            If we have an object that is expensive to construct, or that
            wraps a resouce that must not be shared, we might choose to
            use a singleton instance.

            >>> from punq import Container
            >>> container = Container()

            >>> class DataAccessLayer:
            ...     pass
            ...
            >>> class SqlAlchemyDataAccessLayer(DataAccessLayer):
            ...     def __init__(self, engine: SQLAlchemy.Engine):
            ...         pass
            ...
            >>> dal = SqlAlchemyDataAccessLayer(create_engine("sqlite:///"))
            >>> container.register(
            ...     DataAccessLayer,
            ...     instance=dal
            ... )
            <punq.Container object at 0x...>
            >>> assert container.resolve(DataAccessLayer) is dal

            If we need to register a dependency, but we don't need to
                abstract it, we can register it as concrete.

            >>> class FileReader:
            ...     def read (self):
            ...         # Assorted legerdemain and rigmarole
            ...         pass
            ...
            >>> container.register(FileReader)
            <punq.Container object at 0x...>
            >>> assert type(container.resolve(FileReader)) == FileReader

            In this example, the EmailSender type is an abstract class
            and SmtpEmailSender is our concrete implementation.

            >>> class EmailSender:
            ...     def send(self, msg):
            ...         pass
            ...
            >>> class SmtpEmailSender (EmailSender):
            ...     def send(self, msg):
            ...         print("Sending message via smtp")
            ...
            >>> container.register(EmailSender, SmtpEmailSender)
            <punq.Container object at 0x...>
            >>> instance = container.resolve(EmailSender)
            >>> instance.send("beep")
            Sending message via smtp
        """
        ...
    
    def resolve_all(self, service, **kwargs):
        """
        Return all registrations for a given service.

        Some patterns require us to use multiple implementations of an
        interface at the same time.

        Examples:

            In this example, we want to use multiple Authenticator instances to
            check a request.

            >>> class Authenticator:
            ...     def matches(self, req):
            ...         return False
            ...
            ...     def authenticate(self, req):
            ...         return False
            ...
            >>> class BasicAuthenticator(Authenticator):
            ...
            ...     def matches(self, req):
            ...         head = req.headers.get("Authorization", "")
            ...         return head.startswith("Basic ")
            ...
            >>> class TokenAuthenticator(Authenticator):
            ...
            ...     def matches(self, req):
            ...         head = req.headers.get("Authorization", "")
            ...         return head.startswith("Bearer ")
            ...
            >>> def authenticate_request(container, req):
            ...     for authn in req.resolve_all(Authenticator):
            ...         if authn.matches(req):
            ...             return authn.authenticate(req)
        """
        ...
    
    def resolve(self, service_key, **kwargs):
        ...
    


