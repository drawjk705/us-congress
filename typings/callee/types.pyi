"""
This type stub file was generated by pyright.
"""

from callee.base import BaseMatcher

"""
Type-related matchers.
"""
class TypeMatcher(BaseMatcher):
    """Matches an object to a type.
    This class shouldn't be used directly.
    """
    def __init__(self, type_) -> None:
        """:param type\ _: Type to match against"""
        ...
    
    def __repr__(self):
        ...
    


class InstanceOf(TypeMatcher):
    """Matches an object that's an instance of given type
    (as per `isinstance`).
    """
    def __init__(self, type_, exact=...) -> None:
        """
        :param type\ _: Type to match against
        :param exact:

            If True, the match will only succeed if the value type matches
            given ``type_`` exactly.
            Otherwise (the default), a subtype of ``type_`` will also match.
        """
        ...
    
    def match(self, value):
        ...
    


IsA = InstanceOf
class SubclassOf(TypeMatcher):
    """Matches a class that's a subclass of given type
    (as per `issubclass`).
    """
    def __init__(self, type_, strict=...) -> None:
        """
        :param type\ _: Type to match against
        :param strict:

            If True, the match if only succeed if the value is a _strict_
            subclass of ``type_`` -- that is, it's not ``type_`` itself.
            Otherwise (the default), any subclass of ``type_`` matches.
        """
        ...
    
    def match(self, value):
        ...
    


Inherits = SubclassOf
class Type(BaseMatcher):
    """Matches any Python type object."""
    def match(self, value):
        ...
    
    def __repr__(self):
        ...
    


class Class(BaseMatcher):
    """Matches a class (but not any other type object)."""
    def match(self, value):
        ...
    
    def __repr__(self):
        ...
    


