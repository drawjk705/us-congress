"""
This type stub file was generated by pyright.
"""

from callee.base import BaseMatcher

"""
Matchers for collections.
"""
class CollectionMatcher(BaseMatcher):
    """Base class for collections' matchers.
    This class shouldn't be used directly.
    """
    CLASS = ...
    def __init__(self, of=...) -> None:
        """
        :param of: Optional matcher for the elements,
                   or the expected type of the elements.
        """
        ...
    
    def match(self, value):
        ...
    
    def __repr__(self):
        """Return a readable representation of the matcher.
        Used mostly for AssertionError messages in failed tests.

        Example::

            <List[<Integer>]>
        """
        ...
    


class Iterable(CollectionMatcher):
    """Matches any iterable."""
    CLASS = ...
    def __init__(self) -> None:
        ...
    


class Generator(BaseMatcher):
    """Matches an iterable that's a generator.

    A generator can be a generator expression ("comprehension")
    or an invocation of a generator function (one that ``yield``\ s objects).

    .. note::

        To match a *generator function* itself, you should use the
        :class:`~callee.functions.GeneratorFunction` matcher instead.
    """
    def match(self, value):
        ...
    
    def __repr__(self):
        ...
    


class Sequence(CollectionMatcher):
    """Matches a sequence of given items.

    A sequence is an iterable that has a length and can be indexed.
    """
    CLASS = ...


class List(CollectionMatcher):
    """Matches a :class:`list` of given items."""
    CLASS = ...


class Set(CollectionMatcher):
    """Matches a :class:`set` of given items."""
    CLASS = ...


class MappingMatcher(CollectionMatcher):
    """Base class for mapping matchers.
    This class shouldn't be used directly.
    """
    CLASS = ...
    def __init__(self, *args, **kwargs) -> None:
        """Constructor can be invoked either with parameters described below
        (given as keyword arguments), or with two positional arguments:
        matchers/types for dictionary keys & values::

            Dict(String(), int)  # dict mapping strings to ints

        :param keys: Matcher for dictionary keys.
        :param values: Matcher for dictionary values.
        :param of: Matcher for dictionary items, or a tuple of matchers
                   for keys & values, e.g. ``(String(), Integer())``.
                   Cannot be provided if either ``keys`` or ``values``
                   is also passed.

        """
        ...
    
    def match(self, value):
        ...
    
    def __repr__(self):
        """Return a readable representation of the matcher
        Used mostly for AssertionError messages in failed tests.

        Example::

            <Dict[<String> => <Any>]>
        """
        ...
    


class Mapping(MappingMatcher):
    """Matches a mapping of given items."""
    CLASS = ...


class Dict(MappingMatcher):
    """Matches a dictionary (:class:`dict`) of given items."""
    CLASS = ...


class OrderedDict(MappingMatcher):
    """Matches an ordered dictionary (:class:`collections.OrderedDict`)
    of given items.

    On Python 2.6, this requires the ordereddict backport package.
    Otherwise, no object will match this matcher.
    """
    CLASS = ...
    def __init__(self, *args, **kwargs) -> None:
        """For more information about arguments,
        see the documentation of :class:`Dict`.
        """
        ...
    
    def match(self, value):
        ...
    


