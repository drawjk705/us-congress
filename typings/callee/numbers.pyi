"""
This type stub file was generated by pyright.
"""

from callee.base import BaseMatcher

"""
Matchers for numbers.
"""
class NumericMatcher(BaseMatcher):
    """Matches some number type.
    This class shouldn't be used directly.
    """
    CLASS = ...
    def __init__(self) -> None:
        ...
    
    def match(self, value):
        ...
    
    def __repr__(self):
        ...
    


class Number(NumericMatcher):
    """Matches any number
    (integer, float, complex, custom number types, etc.).
    """
    CLASS = ...


class Complex(NumericMatcher):
    """Matches any complex number.

    This *includes* all real, rational, and integer numbers as well,
    which in Python translates to `float`\ s, fractions, and `int`\ egers.
    """
    CLASS = ...


class Real(NumericMatcher):
    """Matches any real number.

    This includes all rational and integer numbers as well, which in Python
    translates to fractions, and `int`\ egers.
    """
    CLASS = ...


class Float(NumericMatcher):
    """Matches a floating point number."""
    CLASS = ...


class Rational(NumericMatcher):
    """Matches a rational number.
    This includes all `int`\ eger numbers as well.
    """
    CLASS = ...


class Fraction(NumericMatcher):
    """Matches a fraction object."""
    CLASS = ...


class Integral(NumericMatcher):
    """Matches any integer.
    This ignores the length of integer's internal representation on Python 2.
    """
    CLASS = ...


class Integer(NumericMatcher):
    """Matches a regular integer.

    On Python 3, there is no distinction between regular and long integer,
    making this matcher and :class:`Long` equivalent.

    On Python 2, this matches the :class:`int` integers exclusively.
    """
    CLASS = ...


Int = Integer
class Long(NumericMatcher):
    """Matches a long integer.

    On Python 3, this is the same as regular integer, making this matcher
    and :class:`Integer` equivalent.

    On Python 2, this matches the :class:`long` integers exclusively.
    """
    CLASS = ...


