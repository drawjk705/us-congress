"""
This type stub file was generated by pyright.
"""

import sys

"""
Compatibility shims for different Python versions.
"""
IS_PY3 = sys.version_info[0] == 3
STRING_TYPES = (str, ) if IS_PY3 else (basestring, )
casefold = getattr(str, 'casefold', None) or lambda s: s.lower()
class MetaclassDecorator(object):
    """Decorator for creating a class through a metaclass.

    Unlike ``__metaclass__`` attribute from Python 2, or ``metaclass=`` keyword
    argument from Python 3, the ``@metaclass`` decorator works with both
    versions of the language.

    Example::

        @metaclass(MyMetaclass)
        class MyClass(object):
            pass
    """
    def __init__(self, meta) -> None:
        ...
    
    def __call__(self, cls):
        """Apply the decorator to given class.

        This recreates the class using the previously supplied metaclass.
        """
        ...
    


metaclass = MetaclassDecorator
def getargspec(obj):
    """Portable version of inspect.getargspec().

    Necessary because the original is no longer available
    starting from Python 3.6.

    :return: 4-tuple of (argnames, varargname, kwargname, defaults)

    Note that distinction between positional-or-keyword and keyword-only
    parameters will be lost, as the original getargspec() doesn't honor it.
    """
    ...

